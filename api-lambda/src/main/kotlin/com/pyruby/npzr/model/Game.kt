package com.pyruby.npzr.model

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable
import com.fasterxml.jackson.annotation.JsonIgnore

@DynamoDBTable(tableName="Game")
data class Game(
        @DynamoDBHashKey(attributeName="id") @DynamoDBAutoGeneratedKey var id: String? = null,
        @DynamoDBAttribute(attributeName = "players") var players: List<Player> = emptyList(),
        @DynamoDBAttribute(attributeName = "discard_pile") var discardPile: List<Card> = emptyList(),
        @DynamoDBAttribute(attributeName = "deck") @JsonIgnore var deck: List<Card> = emptyList()
) {

    fun join(secondPlayer: String): Game {
        if (player2 != null || players[1].playerType != PlayerType.Player ) {
            throw IllegalStateException("Cannot join this game")
        }
        return copy(players= listOf(players[0].copy(hand=deck.subList(0,5), playState = PlayState.Draw), players[1].copy(userId = secondPlayer, hand=deck.subList(5, 10))),
             deck = deck.subList(10, deck.size)   )
    }

    @JsonIgnore
    @DynamoDBAttribute(attributeName="player1")
    var player1: String? = null
        get() = if (players.isNotEmpty()) players[0].userId else null

    @JsonIgnore
    @DynamoDBAttribute(attributeName="player2")
    var player2: String? = null
        get() = if (players.size > 1) players[1].userId else null

    companion object {
        fun createGame(username: String, opponent: PlayerType) : Game {
            val ids = (0..55).shuffled()
            val deck = (0..47).map { idx -> Card("" + ids[idx], BodyPart.values()[idx % 3], CharacterType.values()[idx % 4])}
                .plus( (0..4).map { idx -> Card("" + ids[(idx + 48)], BodyPart.Wild, CharacterType.values()[idx])})
                .plus( (0..2).map { idx -> Card("" + ids[(idx + 53)], BodyPart.values()[idx], CharacterType.Wild)})
            val players = listOf(Player(username), Player(playerType = opponent))
            return Game(deck = deck.shuffled(), players = players)
        }
    }
}