directive @aws_subscribe( mutations: [String!]!) on FIELD_DEFINITION
directive @aws_iam on FIELD_DEFINITION | OBJECT
directive @aws_cognito_user_pools on FIELD_DEFINITION | OBJECT

type Mutation {
    createGame(input: CreateGameInput!): Game
    joinGame(input: JoinGameInput!): Game
    playCard(input: PlayCardInput!): Game @aws_iam @aws_cognito_user_pools
}

type Query {
    getGame(gameId: ID!): Game
    findGamesAwaitingSecondPlayer: GameConnection!
}

type Subscription {
    createdGame: Game @aws_subscribe(mutations: ["createGame"])
    joinedGame: Game @aws_subscribe(mutations: ["joinGame"])
    playedCard(
        id: ID
    ): Game @aws_subscribe(mutations: ["playCard"])
}

type User {
    id: ID!
}

enum PlayerType {
    Player,
    AI
}

enum BodyPartType {
    Head,
    Torso,
    Legs,
    Wild,
    Flipped
}

enum CharacterType {
    Ninja,
    Pirate,
    Zombie,
    Robot,
    Wild,
    Flipped
}

enum PlayState {
    Play,
    Move,
    MoveWild,
    Wait
}

type Game @aws_iam @aws_cognito_user_pools {
    id: ID!
    players: [Player!]!,
    discardPile: [Card!]!
}

type Player @aws_iam @aws_cognito_user_pools {
    playerType: PlayerType!
    userId: String
    hand: [Card!]!
    stacks: [Stack!]!
    completed: [CharacterType!]!
    playState: PlayState!
}

type Card @aws_iam @aws_cognito_user_pools {
    id: ID!
    bodyPart: BodyPartType!
    characterType: CharacterType!
}

type Stack @aws_iam @aws_cognito_user_pools {
    id: ID!
    head: [Card!]!
    torso: [Card!]!
    legs: [Card!]!
}

type GameConnection {
    items: [Game]
    nextToken: String
}

input CreateGameInput {
    opponent: PlayerType!
}

input JoinGameInput {
    gameId: ID!
}

input PlayCardInput {
    gameId: ID!
    cardId: ID!
    stackId: ID!
    position: BodyPartType!
}

schema {
    query: Query,
    mutation: Mutation,
    subscription: Subscription
}