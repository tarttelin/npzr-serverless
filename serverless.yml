service: npzr

plugins:
  - serverless-stack-output
  - serverless-dynamodb-local
  - serverless-appsync-plugin
  - serverless-pseudo-parameters
  - serverless-s3-sync

provider:
  name: aws
  runtime: java8
  stage: '${opt:stage, ''dev''}'
  region: eu-west-1
  profile: npzr
  cfLogs: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - sqs:SendMessage
        - sqs:GetQueueUrl
        - sqs:ReceiveMessage
        - sqs:GetQueueAttributes
        - sqs:DeleteMessage
        - appsync:GraphQL
      Resource:
        - { "Fn::GetAtt": ["GameDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["NPCQueue", "Arn"]}
        - { "Fn::GetAtt": ["GraphQlApi", "Arn"]}

custom:
  gameTableName: 'game-${self:provider.stage}'
  siteName: www-${self:provider.stage}.${self:custom.hostedZoneName}
  hostedZoneName: saskcowgames.com
  aliasHostedZoneId: Z1BKCTXD74EZPE
  aliasDNSName: s3-website-eu-west-1.amazonaws.com
  userPoolName: 'npzrUserPool${self:provider.stage}'
  accountId: #{AWS::AccountId}
  output:
    handler: output.handler
    file: outputs.yaml
  appSync:
    name: npzr
    logConfig:
      level: ALL
    authenticationType: AMAZON_COGNITO_USER_POOLS
    additionalAuthenticationProviders:
      - authenticationType: AWS_IAM
    userPoolConfig:
      defaultAction: ALLOW
      userPoolId: { Ref: UserPool }
    mappingTemplates:
      - dataSource: createGameLambdaDS
        type: Mutation
        field: createGame
        request: 'createGameReq.vtl'
        response: 'createGameRes.vtl'
      - dataSource: joinGameLambdaDS
        type: Mutation
        field: joinGame
        request: 'joinGameReq.vtl'
        response: 'joinGameRes.vtl'
      - dataSource: playCardLambdaDS
        type: Mutation
        field: playCard
        request: 'playCardReq.vtl'
        response: 'playCardRes.vtl'
      - dataSource: GameDDS
        type: Query
        field: getGame
        request: 'getGameReq.vtl'
        response: 'getGameRes.vtl'
      - dataSource: GameDDS
        type: Query
        field: findGamesAwaitingSecondPlayer
        request: 'findGamesAwaitingSecondPlayerReq.vtl'
        response: 'findGamesAwaitingSecondPlayerRes.vtl'
    dataSources:
      - type: AWS_LAMBDA
        name: createGameLambdaDS
        description: "Lambda datasource"
        config:
          lambdaFunctionArn: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-createGame"
          serviceRoleArn: { "Fn::GetAtt": ["AppSyncServiceRole", "Arn" ] }
      - type: AWS_LAMBDA
        name: joinGameLambdaDS
        description: "Lambda datasource to join a game"
        config:
          lambdaFunctionArn: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-joinGame"
          serviceRoleArn: { "Fn::GetAtt": ["AppSyncServiceRole", "Arn" ] }
      - type: AWS_LAMBDA
        name: playCardLambdaDS
        description: "Lambda datasource to play a card"
        config:
          lambdaFunctionArn: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-playCard"
          serviceRoleArn: { "Fn::GetAtt": ["AppSyncServiceRole", "Arn" ] }
      - type: AMAZON_DYNAMODB
        name: GameDDS
        description: "DynamoDB datasource for Game table"
        config:
          tableName:
            Ref: GameDynamoDBTable
          serviceRoleArn: { "Fn::GetAtt": ["AppSyncServiceRole", "Arn" ] }
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      inMemory: true
  s3Sync:
    - bucketName: ${self:custom.customDomain.domainName}
      localDir: ui/build
      acl: public-read
      followSymlinks: true
      defaultContentType: text/html
      params:
        - index.html:
            CacheControl: 'no-cache'
        - "*.js":
            CacheControl: "public, max-age: 3600"
  domains:
    prod: npzr-api.${self:custom.hostedZoneName}
    staging: npzr-api-stage.${self:custom.hostedZoneName}
    dev: npzr-api-dev.${self:custom.hostedZoneName}
  customDomain:
    domainName: ${self:custom.domains.${self:provider.stage}}
    basePath: ''
    stage: ${self:provider.stage}
    certificateName: "*.${self:custom.hostedZoneName}"
    createRoute53Record: true
    endpointType: 'regional'

package:
  individually: true

functions:
  createGame:
    handler: com.pyruby.npzr.handlers.CreateGameHandler
    package:
      artifact: api-lambda/build/libs/api-lambda-dev-all.jar
  joinGame:
    handler: com.pyruby.npzr.handlers.JoinGameHandler
    package:
      artifact: api-lambda/build/libs/api-lambda-dev-all.jar
  playCard:
    handler: com.pyruby.npzr.handlers.PlayGameHandler
    package:
      artifact: api-lambda/build/libs/api-lambda-dev-all.jar
  npcPlayer:
    handler: com.pyruby.npzr.npc.NpcPlayerHandler
    package:
      artifact: npc-lambda/build/libs/npc-lambda-dev-all.jar
    events:
      - sqs:
          arn: { "Fn::GetAtt": ["NPCQueue", "Arn" ] }
    environment:
      API_URL:
        { "Fn::GetAtt": [
          "GraphQlApi",
          "GraphQLUrl"
        ]}

resources:
  - '${file(resources/cognito.yml)}'
  - '${file(resources/dynamo.yml)}'
  - Resources:
      CreateGameLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
          RetentionInDays: "3"
      JoinGameLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
          RetentionInDays: "7"
      PlayCardLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
          RetentionInDays: "3"
      staticBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${self:custom.customDomain.domainName}
          AccessControl: PublicRead
          WebsiteConfiguration:
            IndexDocument: index.html
            ErrorDocument: index.html
          CorsConfiguration:
            CorsRules:
              - AllowedOrigins:
                  - '*'
                AllowedHeaders:
                  - '*'
                AllowedMethods:
                  - GET
                  - HEAD
                MaxAge: 3000
      AppSyncServiceRole:
        Type: "AWS::IAM::Role"
        Properties:
          RoleName: "AppSyncServiceRole"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Principal:
                  Service:
                    - "appsync.amazonaws.com"
                Action:
                  - "sts:AssumeRole"
          Policies:
            - PolicyName: "Lambda-CreateGameServiceRole-Policy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action:
                      - "lambda:invokeFunction"
                    Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-createGame"
            - PolicyName: "Lambda-JoinGameServiceRole-Policy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action:
                      - "lambda:invokeFunction"
                    Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-joinGame"
            - PolicyName: "Lambda-PlayCardServiceRole-Policy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action:
                      - "lambda:invokeFunction"
                    Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-playCard"
            - PolicyName: "Dynamo-AppSyncServiceRole-Policy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action:
                      - "dynamodb:DeleteItem"
                      - "dynamodb:GetItem"
                      - "dynamodb:PutItem"
                      - "dynamodb:Query"
                      - "dynamodb:Scan"
                      - "dynamodb:UpdateItem"
                    Resource: { "Fn::GetAtt": ["GameDynamoDBTable", "Arn" ] }
      DnsRecord:
        Type: "AWS::Route53::RecordSet"
        Properties:
          AliasTarget:
            DNSName: ${self:custom.aliasDNSName}
            HostedZoneId: ${self:custom.aliasHostedZoneId}
          HostedZoneName: ${self:custom.hostedZoneName}.
          Name:
            Ref: staticBucket
          Type: A
      NPCQueue:
        Type: "AWS::SQS::Queue"
        Properties:
          QueueName: NPCQueue-${self:provider.stage}